#csapp notes

perplexing => confusing

unix> ./hello  (—> ./hello is not a built-in shell command, so it is rendered as a name)
hello, world
unix>

ALU: Arithmetic/Logic Unit
PC: Program counter
USB: Universal Serial Bus

Buses carry words(4/8 bytes) between components.
System bus, Memory bus, I/O bus

I/O devices: keyboard + mouse (input); display (output); a disk drive for long-term storage of data and programs.
Each I/O device connects to the I/O bus by a controller or an adapter.

[controller et adapter]
controllers: are chip sets in the device itself or on the system’s main printed circuit board (motherboard);
adapter: a card that plugs into a slot on the motherboard

Controllers and adapters transfer info back n forth between the I/O bus and an I/O device.

Main memory contains a collection of Dynamic Random Access Memory chips.

CPU = PC + registers + processor + ALU
CPU can:
load   a byte/word main memory => a register
store   a register => a location in main memory
operate   ALU + registers
jump    a word  instruction => PC

The process of reading an executable .o file:
1. data: keyboard => I/O bridge => I/O bus interface => registers => I/O bridge => main memory;
2. executable file: Disk => I/O bridge => main memory;
3. output: main memory => register => bus interface => I/O bridge => display;

facts:
a register holds a few hundred bytes of info;
the main memory holds billions of bytes;

processor-memory gap: the processor runs 100 times faster than memory.
(cache memories arise for this reason)

L1 cache: 
on the processor chip (inside the processor);
holds tens of thousands of bytes;
can be accessed nearly as fast as registers;

L2 cache:
connected to the processor by a special bus;
holds hundreds of thousands to millions of bytes;
accessed 5-10 times faster than main memory;

L3 cache:
NA

Cache: smaller than main memory but faster to access

Layers:
Application programs;
Operating systems;
hardwares (Processor, Main memory, I/O devices);

CPU interleaves processes.
When switching processes, “context” is saved so that the process resumes nicely.

Process == several threads;

Virtual memory:
Kernel virtual memory
User stack (created at run time)
Memory mapped region for shared libraries
Run-time heap (created at run time by malloc)
Read/write data
Read-only code and data

any file == bytes (a unique view for I/O everything)

Linus is Finnish

Networks: another I/O between computers

Concurrency: multiple & simultaneous activities
Parallelism: the use of concurrency to make a system run faster.
Parallelism can be used at 3 levels of abstractions:
1. Thread-level concurrency
2. Instruction-Level parallelism
3. Single-Instruction, Multiple-Data (SIMD) Parallelism

system = hardware + software

Difference between integer and floating-point numbers:
finiteness of representation.

hexadecimal notation:
from ‘a’ to ‘f’: can be either upper case or lower case, or mixed cases.














