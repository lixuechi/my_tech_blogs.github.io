#csapp notes

perplexing => confusing

unix> ./hello  (—> ./hello is not a built-in shell command, so it is rendered as a name)
hello, world
unix>

ALU: Arithmetic/Logic Unit
PC: Program counter
USB: Universal Serial Bus

Buses carry words(4/8 bytes) between components.
System bus, Memory bus, I/O bus

I/O devices: keyboard + mouse (input); display (output); a disk drive for long-term storage of data and programs.
Each I/O device connects to the I/O bus by a controller or an adapter.

[controller et adapter]
controllers: are chip sets in the device itself or on the system’s main printed circuit board (motherboard);
adapter: a card that plugs into a slot on the motherboard

Controllers and adapters transfer info back n forth between the I/O bus and an I/O device.

Main memory contains a collection of Dynamic Random Access Memory chips.

CPU = PC + registers + processor + ALU
CPU can:
load   a byte/word main memory => a register
store   a register => a location in main memory
operate   ALU + registers
jump    a word  instruction => PC

The process of reading an executable .o file:
1. data: keyboard => I/O bridge => I/O bus interface => registers => I/O bridge => main memory;
2. executable file: Disk => I/O bridge => main memory;
3. output: main memory => register => bus interface => I/O bridge => display;

facts:
a register holds a few hundred bytes of info;
the main memory holds billions of bytes;

processor-memory gap: the processor runs 100 times faster than memory.
(cache memories arise for this reason)

L1 cache: 
on the processor chip (inside the processor);
holds tens of thousands of bytes;
can be accessed nearly as fast as registers;

L2 cache:
connected to the processor by a special bus;
holds hundreds of thousands to millions of bytes;
accessed 5-10 times faster than main memory;

L3 cache:
NA

Cache: smaller than main memory but faster to access

Layers:
Application programs;
Operating systems;
hardwares (Processor, Main memory, I/O devices);

CPU interleaves processes.
When switching processes, “context” is saved so that the process resumes nicely.

Process == several threads;

Virtual memory:
Kernel virtual memory
User stack (created at run time)
Memory mapped region for shared libraries
Run-time heap (created at run time by malloc)
Read/write data
Read-only code and data

any file == bytes (a unique view for I/O everything)

Linus is Finnish

Networks: another I/O between computers

Concurrency: multiple & simultaneous activities
Parallelism: the use of concurrency to make a system run faster.
Parallelism can be used at 3 levels of abstractions:
1. Thread-level concurrency
2. Instruction-Level parallelism
3. Single-Instruction, Multiple-Data (SIMD) Parallelism

system = hardware + software

Difference between integer and floating-point numbers:
finiteness of representation.

hexadecimal notation:
from ‘a’ to ‘f’: can be either upper case or lower case, or mixed cases.

i + 4j
x = 2048 = 2^11
n = 11 = 3 + 4 * 2
if it’s in the form of (i+4j)
x(hex) = a leading hex digit of 1 (i=0), 2(i=1), 4(i=2), 8(i=3), followed by j hex 0s.
hex rep => 0x800
Why didn’t I understand the above formula which obnoxiously seems so easy:
For x = 2^n, x is a binary with a leading 1, and n following 0s.
For example, 
if n = 0, x = 1(d)/0000.0001(b)
if n = 1, x = 2(d)/0000.0010(b)
if n = 2, x = 4(d)/0000.0100(b)
if n = 3, x = 8(d)/0000.1000(b)
if n = 4, x = 16(d)/0001.0000(b) === there are 4 of 0s following 1
Now look back, 
x = 2^(i + 4j) = 2^i * 2^4j
if i = 0, x = 2^4j = a binary with a leading 1 and 4j following 0s = a hexadecimal with a leading 1 and j following hex 0s;
if i = 1, x = 2 * 2^4j = in binary the result of (i==0) left shift 1 digit (<<1), which is a leading 10(b) and 4j following 0s = in hex a leading 2(h) and 4j following hex 0s;
if i = 2, x = 4 * 2^4j = in binary the result of (i==0) left shift 2 digits (<<2), which is a leading 100(b) and 4j following 0s;
if i = 3, x = 8 * 2^4j = …
Hah, now I get it.

* What is virtual addresses?



The exact number of bytes for each kind of data types (char, short int, int, long int, long long int, char*, float, double) depends on both the machine and the compiler.
machines: 32-bit/64-bit
“long” and “char *” both use the full word size of the machine:
long: 4 in 32-bit/8 in 64-bit
char*: 4 in 32-bit/8 in 64-bit

2 different floating-point formats:
single precision -> float
double precision -> double

Programmer should be aware of portability across different machines and compilers.
One aspect of portability -> make the program insensitive to the exact sizes of the different data types.
C has set lower bounds on the numeric ranges of data types, but no upper bounds.
For example, a program object declared as int cannot always be used to store a pointer. This can work for most 32-bit machines but leads to problems on a 64-bit machine.


a multi-byte object is stored as a contiguous sequence of bytes, with the address of the object given by the smallest address of the bytes used.

one address contains one byte.

little endian: the least significant bit comes first
big endian: the most significant bit comes first 

bi-endian microprocessors: can be configured to operate as either little- or big-endian machines.

The address of a multi-byte object is the address of the first byte of this object. To determine which is the first byte, we use little- or big-endian.
For a int 0x01234567,
when in little-endian: the first byte is 67
when in big-endian: the first byte is 01

A method in C might be called a routine.
a byte pointer can be of type unsigned char.
The byte pointer points to the address of a sequence of bytes.

The C formatting directive “%.2x” indicates that an integer should be printed in hexadecimal with at least two digits.

“typedef” in C:
typedef int *int_pointer;
int_pointer ip;
defines type “int_pointer” to be a pointer to an int.

